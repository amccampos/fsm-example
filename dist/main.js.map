{
  "version": 3,
  "sources": ["../src/canvas.js", "../src/gameobj.js", "../src/gem.js", "../src/bullet.js", "../src/math.js", "../src/player.js", "../src/fsm.js", "../src/unit.js", "../src/game.js", "../src/main.js"],
  "sourcesContent": ["export class Canvas {\n  \n  /** Cria um novo canvas(js) associado a um canvas (html) cujo id \u00E9 passado. */\n  constructor(id) {\n    this.htmlCanvas = document.getElementById(id)\n    if (this.htmlCanvas) {\n      this.context2d = this.htmlCanvas.getContext('2d')\n    }\n  }\n\n  /** largura do canvas. */\n  width() { return this.htmlCanvas.width }\n\n  /** altura do canvas. */\n  height() { return this.htmlCanvas.height }\n\n  /** Apaga tudo que est\u00E1 no canvas. */\n  clear() {\n    this.context2d.clearRect (0, 0, this.htmlCanvas.width, this.htmlCanvas.height)\n  }\n\n  /** Verifica se um ponto se encontra fora da \u00E1rea do canvas. */\n  isOutside(x, y) {\n    return x < 0 || y < 0 || x > this.htmlCanvas.width || y > this.htmlCanvas.height\n  }\n\n  /** Desenha um objeto do jogo (idealmente este m\u00E9todo deveria estar no obj) */\n  draw(gameobj) {\n    this.context2d.fillStyle = gameobj.fill || 'rgb(40, 40, 120)'\n    this.context2d.strokeStyle = gameobj.stroke || 'rgb(255, 255, 255)'\n    this.context2d.beginPath()\n    this.context2d.arc(gameobj.x, gameobj.y, gameobj.size, 0, 2 * Math.PI)\n    this.context2d.fill()\n    if (gameobj.type === 'unit' || gameobj.type === 'player') {\n      this.context2d.moveTo(gameobj.x, gameobj.y)\n      this.context2d.lineTo(gameobj.x + gameobj.size * Math.cos(gameobj.dir), gameobj.y + gameobj.size * Math.sin(gameobj.dir))\n      this.context2d.stroke()\n    }\n  }\n}", "\n/** Super-classe dos objetos que deve ser atualizados ou desenhados no jogo. */\nexport class GameObject {\n\n  constructor(game, type, x, y, dir = 0, size = 10, speed = 5) {\n    this.game = game\n    this.type = type\n    this.x = x\n    this.y = y\n    this.dir = dir\n    this.size = size\n    this.speed = speed\n\n    // sempre que um GameObject for criado, ele \u00E9 adicionado aos objs do jogo\n    this.game.addGameObj(this)\n  }\n\n  /** Por padr\u00E3o, n\u00E3o faz nada. */\n  update() { }\n\n  /** Por padr\u00E3o, n\u00E3o desenha nada. */\n  draw() { }\n\n  /** Verifica se um ponto encontra-se em sua \u00E1rea. */\n  inBoundingBox(x, y) {\n    return (\n      x >= this.x - this.size &&\n      x <= this.x + this.size &&\n      y >= this.y - this.size &&\n      y <= this.y + this.size\n    )\n  }\n\n  /** Remove-se do conjunto de ojetos do jogo. */\n  destroy() {\n    this.game.removeGameObj(this)\n  }\n}", "import { GameObject } from './gameobj'\n\nexport class Gem extends GameObject {\n  constructor(game, x, y) {\n    super(game, 'gem', x, y)\n    this.fill = 'rgb(255, 0, 0)'\n  }\n\n  draw() {\n    const ctx = this.game.canvas.context2d\n    ctx.fillStyle = 'rgb(255, 0, 0)'\n    ctx.strokeStyle = 'rgb(255, 255, 255)'\n    ctx.beginPath()\n    ctx.moveTo(this.x, this.y+5)\n    ctx.lineTo(this.x-10, this.y-5)\n    ctx.lineTo(this.x-7, this.y-10)\n    ctx.lineTo(this.x+7, this.y-10)\n    ctx.lineTo(this.x+10, this.y-5)\n    ctx.lineTo(this.x, this.y+5)\n    ctx.fill()\n    ctx.stroke()\n  }\n}", "import { GameObject } from \"./gameobj\"\n\nexport class Bullet extends GameObject {\n  constructor(game, x, y, dir) {\n    super(game, 'bullet', x, y, dir, 2, 10)\n    this.fill = 'rgb(255, 255, 255)'\n  }\n\n  update() {\n    // atualiza a posi\u00E7\u00E3o em fun\u00E7\u00E3o da dire\u00E7\u00E3o\n    this.x += this.speed * Math.cos(this.dir)\n    this.y += this.speed * Math.sin(this.dir)\n\n    // se ficar fora da \u00E1rea do canvas, pode remover.\n    if (this.game.canvas.isOutside(this.x, this.y)) {\n      this.destroy()\n    }\n\n    // se bater em algum objeto, remove o objeto e a si mesmo.\n    this.game.objs.find(obj => {\n      if (obj !== this && obj.inBoundingBox(this.x, this.y)) {\n        obj.destroy()\n        this.destroy()\n      }\n    })\n  }\n\n  draw() {\n    const ctx = this.game.canvas.context2d\n    ctx.fillStyle = 'rgb(255, 255, 255)'\n    ctx.strokeStyle = 'rgb(255, 255, 255)'\n    ctx.beginPath()\n    ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI)\n    ctx.fill()\n  }\n}\n", "\n/** Constante multiplicativa para transformar graus em radianos */\nexport const DegToRad = (2*Math.PI) / 360\n\n/** Constante multiplicativa para transformar radianos em graus */\nexport const RadToDeg = 360 / (2*Math.PI)\n\n/** Gerador de n\u00FAmero inteiro, dentro de um intervalo. */\nexport function randomIntRange(max, min = 0) {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\n/** Gerador de n\u00FAmero real, dentro de um intervalo. */\nexport function randomFloatRange(max, min = 0) {\n  return Math.random() * (max - min) + min\n}\n\n/** Calcula a dist\u00EAncia entre dois pontos */\nexport function distance(x0, y0, x1, y1) {\n  const dx = x1 - x0\n  const dy = y1 - y0\n  return Math.sqrt(dx*dx + dy*dy)\n}\n\n/**\n * projeta o ponto (x,y) na dire\u00E7\u00E3o dir. Ou seja, se (x,y) for na\n * dire\u00E7\u00E3o dir a uma dist\u00E2ncia dist, onde ele estar\u00E1.\n */\nexport function projectPoint(x, y, dir, dist = 1) {\n  const px = x + dist * Math.cos(dir)\n  const py = y + dist * Math.sin(dir)\n  return [px, py]\n}\n\n/**\n * Retorna o \u00E2ngulo formado pelas retas:\n * - de (x,y) \u00E0 proje\u00E7\u00E3o de (x,y) na dire\u00E7\u00E3o dir\n * - de (x,y) a (tx, ty)\n */\nexport function calcAngleToTarget(x, y, dir, tx, ty) {\n  const dist = distance(x, y, tx, ty)\n  const [fx, fy] = projectPoint(x, y, dir, dist)\n  let angle = Math.atan2(ty - y, tx - x) - Math.atan2(fy - y, fx - x)\n  if (angle < -Math.PI) angle += 2*Math.PI\n  if (angle > Math.PI) angle -= 2*Math.PI\n  return angle\n}", "import { GameObject } from './gameobj'\nimport { Bullet } from './bullet'\nimport { projectPoint, DegToRad } from './math'\n\nexport class Player extends GameObject {\n\n  constructor(game, x, y, dir) {\n    super(game, 'player', x, y, dir)\n    this.onLeft = false\n    this.onRight = false\n    this.onForward = false\n    this.onFire = false\n    this.armed = true\n\n    // atualiza o estado dos movimentos quando o usu\u00E1rio pressiona uma tecla\n    document.addEventListener('keydown', event => {\n      switch (event.key) {\n        case 'a': this.onLeft = true;    break;\n        case 'd': this.onRight = true;   break;\n        case 'w': this.onForward = true; break;\n        case ' ':\n          if (this.armed) {\n            this.onFire = true\n            this.armed = false\n          }\n          break;\n      }\n      event.preventDefault()\n    })\n    // atualiza o estado dos movimentos quando o usu\u00E1rio solta uma tecla\n    document.addEventListener('keyup', event => {\n      switch (event.key) {\n        case 'a': this.onLeft = false;    break;\n        case 'd': this.onRight = false;   break;\n        case 'w': this.onForward = false; break;\n        case ' ': this.armed = true;      break;\n      }\n      event.preventDefault()\n    })\n  }\n\n  /** Atira ou atualiza a posi\u00E7\u00E3o e/ou dire\u00E7\u00E3o em fun\u00E7\u00E3o do estado das teclas. */\n  update() {\n    if (this.onLeft) { this.turnLeft() }\n    if (this.onRight) { this.turnRight() }\n    if (this.onForward) { this.moveForward() }\n    if (this.onFire) {\n      this.fire()\n      this.onFire = false\n    }\n  }\n\n  /** Segue em frente. */\n  moveForward() {\n    const [x, y] = projectPoint(this.x, this.y, this.dir, this.speed)\n    if (!this.game.canvas.isOutside(x, y)) {\n      this.x = x\n      this.y = y\n    }\n  }\n\n  /** Gira um pouco \u00E0 esquerda. */\n  turnLeft() {\n    this.dir -= this.speed * 2* DegToRad\n  }\n\n  /** Gira um pouco \u00E0 direita. */\n  turnRight() {\n    this.dir += this.speed * 2* DegToRad\n  }\n\n  /** Dispara uma bala. */\n  fire() {\n    const [x, y] = projectPoint(this.x, this.y, this.dir, this.size + 5)\n    new Bullet(this.game, x, y, this.dir)\n  }\n\n  draw() {\n    const ctx = this.game.canvas.context2d\n    ctx.fillStyle = 'rgb(36, 153, 72)'\n    ctx.strokeStyle = 'rgb(255, 255, 255)'\n    ctx.beginPath()\n    ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI)\n    ctx.fill()\n    ctx.moveTo(this.x, this.y)\n    ctx.lineTo(this.x + this.size * Math.cos(this.dir), this.y + this.size * Math.sin(this.dir))\n    ctx.stroke()\n  }\n\n}", "\n/** Estado de uma m\u00E1quina de estado finito. */\nexport class State {\n  constructor(action, entryAction, exitAction) {\n    this.action = action           // a\u00E7\u00E3o executada enquanto estiver no estado\n    this.entryAction = entryAction // a\u00E7\u00E3o executada no momento que entrar no estado\n    this.exitAction = exitAction   // a\u00E7\u00E3o executada no momento que sair do estado\n  }\n}\n\nexport class Transition {\n  constructor(from, to, condition, action) {\n    this.from = from            // estado da unidade em que a transi\u00E7\u00E3o \u00E9 testada\n    this.to = to                // estado para o qual a unidade vai mudar\n    this.condition = condition  // condi\u00E7\u00E3o que ativa a transi\u00E7\u00E3o (se retornar verd.)\n    this.action = action        // o que fazer se a transi\u00E7\u00E3o for ativada.\n  }\n}\n\nexport class FiniteStateMachine {\n\n  constructor(initialState, transitions = []) {\n    this.state = initialState\n    this.transitions = transitions\n  }\n\n  update(unit) {\n    // realiza a\u00E7\u00E3o\n    this.state.action.apply(unit)\n\n    // verifica transi\u00E7\u00F5es\n    const transition = this.transitions\n      .filter(t => t.from === this.state)\n      .find(t => t.condition.apply(unit))\n    if (transition) {\n      this.state.exitAction && this.state.exitAction.apply(unit)\n      transition.action && transition.action.apply(unit)\n      this.state = transition.to\n      this.state.entryAction && this.state.entryAction.apply(unit)\n    }\n  }\n}\n\n", "import { GameObject } from './gameobj'\nimport { State, Transition, FiniteStateMachine } from './fsm'\nimport { calcAngleToTarget, DegToRad, distance, projectPoint } from './math'\n\nexport class Unit extends GameObject {\n  constructor(game, x, y, dir) {\n    super(game, 'unit', x, y, dir)\n\n    this.precious = this.game.objs.find(obj => obj.type === 'gem')\n    this.enemy = this.game.objs.find(obj => obj.type === 'player')\n    \n    // define os pontos de patrulho ao seu redor\n    this.patrolPoints = [\n      { x: this.precious.x - 50, y: this.precious.y - 50 },\n      { x: this.precious.x + 50, y: this.precious.y - 50 },\n      { x: this.precious.x + 50, y: this.precious.y + 50 },\n      { x: this.precious.x - 50, y: this.precious.y + 50 },\n    ]\n    this.currentPoint = 0\n\n    // this.initConditionBasedFSM()\n    this.initMatrixBasedFSM()\n    // this.initObjectBasedFSM()\n  }\n\n  // --- A\u00C7\u00D5ES  ---\n\n  /** Gira em dire\u00E7\u00E3o ao ponto de patrulha atual. */\n  turnToPoint() {\n    const p = this.patrolPoints[this.currentPoint]\n    this.turnTo(p.x, p.y)\n  }\n\n  /** Anda um pouco para frente (em fun\u00E7\u00E3o de sua dire\u00E7\u00E3o e velocidade) */\n  moveForward() {\n    const [x, y] = projectPoint(this.x, this.y, this.dir, this.speed)\n    if (!this.game.canvas.isOutside(x, y)) {\n      this.x = x\n      this.y = y\n    }\n  }\n\n  /** Gira em dire\u00E7\u00E3o ao jogador e anda para frente. */\n  chasePlayer() {\n    this.turnTo(this.enemy.x, this.enemy.y)\n    this.moveForward()\n  }\n\n  // --- UPDATES ---\n\n  initConditionBasedFSM() {\n    this.state = 'turnToPoint'\n    this.update = this.updateUsingConditions\n  }\n\n  updateUsingConditions() {\n    switch(this.state) {\n      case 'turnToPoint':\n        // realiza a\u00E7\u00E3o\n        this.turnToPoint()\n\n        // verifica transi\u00E7\u00F5es\n        if (this.isFacingPoint()) {\n          this.state = 'moveToPoint'\n        }\n        else if (this.isPlayerCloseToGem()) {\n          this.state = 'chasePlayer'\n        }\n        break;\n\n      case 'moveToPoint':\n        // realiza a\u00E7\u00E3o\n        this.moveForward()\n\n        // verifica transi\u00E7\u00F5es\n        if (this.isOverPoint()) {\n          this.nextPoint()\n          this.state = 'turnToPoint'\n        }\n        else if (this.isPlayerCloseToGem()) {\n          this.state = 'chasePlayer'\n        }\n        break;\n\n      case 'chasePlayer':\n        // realiza a\u00E7\u00E3o\n        this.chasePlayer()\n\n        // verifica transi\u00E7\u00F5es\n        if (this.isPlayerFarFromGem()) {\n          this.state = 'turnToPoint'\n        }\n        break;\n\n    }\n  }\n\n  // ---------------------\n\n  initMatrixBasedFSM() {\n    /*                   turnToPoint       moveToPoint       chasePlayer  */\n    this.states =      [ this.turnToPoint, this.moveForward, this.chasePlayer ]\n    this.entryAction = [ this.nextPoint,   null,             null             ]\n    // this.exitActions = [ ... ]\n    this.transitions = [  /* turnToPoint              moveToPoint         chasePlayer              */\n         /* turnToPoint */ [ null,                    this.isFacingPoint, this.isPlayerCloseToGem ],\n         /* moveToPoint */ [ this.isOverPoint,        null,               this.isPlayerCloseToGem ],\n         /* chasePlayer */ [ this.isPlayerFarFromGem, null,               null                    ],\n    ]\n    this.stateIndex = 0\n    this.update = this.updateUsingMatrix\n\n    /* Alternativa\n    this.conditions = [ null, this.isFacingPoint, this.isPlayerCloseToGem, this.isPlayerFarFromGem, this.isOverPoint ]\n    this.transitions = [\n      [ 0, 1, 2 ],\n      [ 4, 0, 2 ],\n      [ 3, 0, 0 ],\n    ]\n    */\n  }\n\n  updateUsingMatrix() {\n    // realiza a\u00E7\u00E3o\n    const action = this.states[this.stateIndex]\n    action.apply(this)\n\n    // verifica transi\u00E7\u00F5es\n    const transitions = this.transitions[this.stateIndex]\n    const newState = transitions.findIndex(t => t && t.apply(this))\n    if (newState >= 0) {\n      const entry = this.entryAction[newState]\n      entry && entry.apply(this)\n      this.stateIndex = newState\n    }\n  }\n\n  // ---------------------\n\n  initObjectBasedFSM() {\n    const turnToPoint = new State(this.turnToPoint)\n    const moveToPoint = new State(this.moveForward)\n    const chasePlayer = new State(this.chasePlayer)\n\n    const t1 = new Transition(turnToPoint, moveToPoint, this.isFacingPoint)\n    const t2 = new Transition(turnToPoint, chasePlayer, this.isPlayerCloseToGem)\n    const t3 = new Transition(moveToPoint, turnToPoint, this.isOverPoint, this.nextPoint)\n    const t4 = new Transition(moveToPoint, chasePlayer, this.isPlayerCloseToGem)\n    const t5 = new Transition(chasePlayer, turnToPoint, this.isPlayerFarFromGem)\n\n    this.fsm = new FiniteStateMachine( turnToPoint, [ t1, t2, t3, t4, t5 ])\n    this.update = this.updateUsingObjects\n  }\n\n  updateUsingObjects() {\n    this.fsm.update(this)\n  }\n\n\n  // --- m\u00E9todos auxiliares ---\n\n  /** Gira em dire\u00E7\u00E3o a um ponto sem exceder sua velocidade de rota\u00E7\u00E3o. */\n  turnTo(x, y) {\n    const rotationSpeed = 2 * this.speed * DegToRad\n    const ang = calcAngleToTarget(this.x, this.y, this.dir, x, y)\n    const angle = ang < 0 ? Math.max(ang, -rotationSpeed) : Math.min(ang, rotationSpeed) \n    this.dir += angle\n  }\n\n  /** Atualiza o ponto de patrula para ser o pr\u00F3ximo do array (circular). */\n  nextPoint() {\n    this.currentPoint = (this.currentPoint + 1) % this.patrolPoints.length\n  }\n\n  /** Verifica se o ponto atual da patrulha est\u00E1 \u00E0 frente da unidade. */\n  isFacingPoint() {\n    const p = this.patrolPoints[this.currentPoint]\n    const a = calcAngleToTarget(this.x, this.y, this.dir, p.x, p.y)\n    return Math.abs(a) < DegToRad\n  }\n\n  /** Verifica se o jogador est\u00E1 pr\u00F3ximo \u00E0 joia. */\n  isPlayerCloseToGem() {\n    const d = distance(this.enemy.x, this.enemy.y, this.precious.x, this.precious.y)\n    return d < 200\n  }\n\n  /** Verifica se o jogador se encontra longe da joia. */\n  isPlayerFarFromGem() {\n    return !this.isPlayerCloseToGem()\n  }\n\n  /** Verifica se a unidade se encontra sobre um ponto de patrulha. */\n  isOverPoint() {\n    const p = this.patrolPoints[this.currentPoint]\n    return distance(this.x, this.y, p.x, p.y) < this.speed\n  }\n\n  draw() {\n    const ctx = this.game.canvas.context2d\n    ctx.fillStyle = 'rgb(36, 45, 153)'\n    ctx.strokeStyle = 'rgb(255, 255, 255)'\n    ctx.beginPath()\n    ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI)\n    ctx.fill()\n    ctx.moveTo(this.x, this.y)\n    ctx.lineTo(this.x + this.size * Math.cos(this.dir), this.y + this.size * Math.sin(this.dir))\n    ctx.stroke()\n  }\n}\n", "import { Canvas } from './canvas'\nimport { GameObject } from './gameobj'\nimport { Gem } from './gem'\nimport { Player } from './player'\nimport { Unit } from './unit'\nimport { randomIntRange, randomFloatRange } from './math'\n\nexport class Game {\n\n  constructor(canvasId) {\n    this.canvas = new Canvas(canvasId || 'canvas')\n    this.objs = []\n    this.reset()\n  }\n\n  /** A cada itera\u00E7\u00E3o do jogo */\n  tick() {\n    this.canvas.clear()\n    this.objs.forEach(item => {\n      item.update()\n      item.draw()\n    })\n  }\n\n  reset() {\n    const rndX = limit => randomIntRange(this.canvas.width() - limit, limit)\n    const rndY = limit => randomIntRange(this.canvas.height() - limit, limit)\n\n    this.canvas.clear()\n    this.objs = []\n    \n    new Gem(this, rndX(50), rndY(50))\n    new Player(this, rndX(50), rndY(50))\n    new Unit(this, rndX(50), rndY(50), randomFloatRange(Math.PI, -Math.PI))\n    \n    this.objs.forEach(item => item.draw()) \n  }\n\n  start() {\n    this.stop()\n    this.interval = setInterval(() => this.tick(), 30)\n  }\n\n  stop() {\n    if (this.interval) {\n      clearInterval(this.interval)\n    }\n  }\n\n  addGameObj(obj) {\n    this.objs.push(obj)\n  }\n\n  removeGameObj(obj) {\n    this.objs = this.objs.filter(o => o !== obj)\n  }\n}\n", "import { Game } from './game'\n\nwindow.onload = () => {\n  const start_btn = document.getElementById('start_btn')\n  const pause_btn = document.getElementById('pause_btn')\n  const reset_btn = document.getElementById('reset_btn')\n\n  const game = new Game('canvas')\n\n  start_btn.onclick = () => game.start()\n  pause_btn.onclick = () => game.stop()\n  reset_btn.onclick = () => game.reset()\n}\n"],
  "mappings": "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",
  "names": []
}
